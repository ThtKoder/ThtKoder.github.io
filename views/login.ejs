<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="google-signin-client_id" content="935961013962-mas7qgco0ljt145kfqje60gsc50v4ccb.apps.googleusercontent.com">
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <link rel="stylesheet" href="/ref.css">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title style="text-align: center;">Login</title>

    <meta http-equiv="Content-Security-Policy" content="
    script-src 'self' https://apis.google.com https://accounts.google.com https://www.gstatic.com 'unsafe-inline';
    frame-src 'self' https://accounts.google.com;
    connect-src 'self' https://accounts.google.com;
    style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
    font-src 'self' https://fonts.gstatic.com;
    img-src 'self' data: https://www.gstatic.com;">
</head>
<body>
    <h1 style="text-align: center;">Login</h1>
    <div style="align-items: center;" class="g-signin2" data-onsuccess="onSignIn" ></div>
    <div id="g_id_onload"
         data-client_id="935961013962-mas7qgco0ljt145kfqje60gsc50v4ccb.apps.googleusercontent.com"
         data-login_uri="/auth/google/callback"
         data-auto_prompt="false"
         data-callback="handleCredentialResponse">
    </div>
    
    <div class="g_id_signin"
         data-type="standard"
         data-size="large"
         data-theme="outline"
         data-text="sign_in_with"
         data-shape="rectangular"
         data-logo_alignment="center">
    </div>
    
    <script src="https://apis.google.com/js/platform.js?onload=init"></script>

    <!-- script that handles the login and then forwards to the correct page (student, advisor, head of service)-->
    <script>
        function handleCredentialResponse(response) {
            console.log("Encoded JWT ID token: " + response.credential);

            fetch('/auth/google/callback', { // Your backend endpoint to verify the token
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ idToken: response.credential })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Authentication successful. Redirecting...');
                    window.location.href = data.redirectUrl || '/dashboard'; // Redirect based on server response
                } else {
                    console.error('Authentication failed:', data.error);
                    // Display error message to the user
                }
            })
            .catch(error => {
                console.error('Error sending ID token to server:', error);
            });
        }

        window.onload = function () {
          google.accounts.id.initialize({
            client_id: 'YOUR_CLIENT_ID.apps.googleusercontent.com', // Replace with your actual Client ID
            callback: handleCredentialResponse
          });
          google.accounts.id.renderButton(
            document.getElementById('g_id_onload'),
            { theme: 'outline', size: 'large' }  // customization attributes
          );
        }
    </script>
</body>
</html>

<!-- 
    <script>
        function onSignIn(googleUser) {
            var profile = googleUser.getBasicProfile();
            console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.
            console.log('Name: ' + profile.getName());
            console.log('Image URL: ' + profile.getImageUrl());
            console.log('Email: ' + profile.getEmail()); //Null if not included in scope

            //Send the data to your backend
            fetch('/save-user', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id: profile.getId(),
                name: profile.getName(),
                imageUrl: profile.getImageUrl(),
                email: profile.getEmail()
            })
            }).then(response => {
            if (response.ok) {
                console.log('User data saved successfully.');
            } else {
                console.error('Failed to save user data.');
            }
            }).catch(error => {
            console.error('Error:', error);
            });
        }

        function redirectBasedOnEmail(email) {
            if (email.endsWith('@gmail.com')) {
            window.location.href = '/dashboard';
            } else if (email.endsWith('@cis.edu.hk')) {
            window.location.href = '/advisor';
            } else if (email.endsWith('muttam@cis.edu.hk')) {
            window.location.href = '/headofservice';
            }
        }

        // Call the function after successful sign-in
        onSignIn = async function(googleUser) {
            var profile = googleUser.getBasicProfile();
            console.log('ID: ' + profile.getId());
            console.log('Name: ' + profile.getName());
            console.log('Image URL: ' + profile.getImageUrl());
            console.log('Email: ' + profile.getEmail());

            try {
            // Check if the user already exists in the database
            const response = await fetch('/check-user', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                email: profile.getEmail()
                })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.exists) {
                console.log('User already exists:', data.user);
                // Load the information from the existing object
                redirectBasedOnEmail(profile.getEmail());
                } else {
                // Create a new user object in the database
                const saveResponse = await fetch('/save-user', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                    id: profile.getId(),
                    name: profile.getName(),
                    imageUrl: profile.getImageUrl(),
                    email: profile.getEmail()
                    })
                });

                if (saveResponse.ok) {
                    console.log('User data saved successfully.');
                    redirectBasedOnEmail(profile.getEmail());
                } else {
                    console.error('Failed to save user data.');
                }
                }
            } else {
                console.error('Failed to check user existence.');
            }
            } catch (error) {
            console.error('Error:', error);
            }
        };
    </script>
</body>
</html>
 -->